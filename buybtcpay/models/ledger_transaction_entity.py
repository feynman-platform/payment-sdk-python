# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.buy_btc_money_json_value import BuyBtcMoneyJsonValue
from typing import Optional, Set
from typing_extensions import Self

class LedgerTransactionEntity(BaseModel):
    """
    记账本，采用复式记账的分录方式
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    business_id: Optional[StrictStr] = Field(default=None, alias="businessId")
    channel_id: Optional[StrictStr] = Field(default=None, description="支付链路ID，跟踪支付流程，为了兼容旧数据，此字段可以为空", alias="channelId")
    business_type: Optional[StrictInt] = Field(default=None, description="1: Recharge, 10: Virtual account recharge, 2: Refund, 3: Transfer, 4: Frozen, 5: Fee, 6: Platform recharge, 7: Unfrozen, 8: Merchant to merchant, 81: Merchant to merchant different currency, 100: Reversal platform to merchant, 101: Reversal merchant to platform, 102: Reversal merchant to merchant", alias="businessType")
    account_type: Optional[StrictInt] = Field(default=None, description="1: Platform, 2: Merchant, 22: Virtual account, 21: Merchant Frozen, 3: Bank", alias="accountType")
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    direction: Optional[StrictInt] = Field(default=None, description="1: Debit, 2: Credit")
    amount: Optional[BuyBtcMoneyJsonValue] = None
    balance: Optional[BuyBtcMoneyJsonValue] = None
    wallet_id: Optional[StrictInt] = Field(default=None, description="钱包ID", alias="walletId")
    counterparty_account_type: Optional[StrictInt] = Field(default=None, description="1: Platform, 2: Merchant, 22: Virtual account, 21: Merchant Frozen, 3: Bank", alias="counterpartyAccountType")
    counterparty_account_no: Optional[StrictStr] = Field(default=None, description="交易对方账户号码", alias="counterpartyAccountNo")
    counterparty_wallet_id: Optional[StrictInt] = Field(default=None, description="交易对方钱包ID", alias="counterpartyWalletId")
    extra: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="交易附加信息，比如转账备注、跨币种交易汇率、值附加信息等")
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "businessId", "channelId", "businessType", "accountType", "accountNo", "direction", "amount", "balance", "walletId", "counterpartyAccountType", "counterpartyAccountNo", "counterpartyWalletId", "extra"]

    @field_validator('business_type')
    def business_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 10, 2, 3, 4, 5, 6, 7, 8, 81, 100, 101, 102]):
            raise ValueError("must be one of enum values (1, 10, 2, 3, 4, 5, 6, 7, 8, 81, 100, 101, 102)")
        return value

    @field_validator('account_type')
    def account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 22, 21, 3]):
            raise ValueError("must be one of enum values (1, 2, 22, 21, 3)")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2]):
            raise ValueError("must be one of enum values (1, 2)")
        return value

    @field_validator('counterparty_account_type')
    def counterparty_account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 22, 21, 3]):
            raise ValueError("must be one of enum values (1, 2, 22, 21, 3)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LedgerTransactionEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of balance
        if self.balance:
            _dict['balance'] = self.balance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LedgerTransactionEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "businessId": obj.get("businessId"),
            "channelId": obj.get("channelId"),
            "businessType": obj.get("businessType"),
            "accountType": obj.get("accountType"),
            "accountNo": obj.get("accountNo"),
            "direction": obj.get("direction"),
            "amount": BuyBtcMoneyJsonValue.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "balance": BuyBtcMoneyJsonValue.from_dict(obj["balance"]) if obj.get("balance") is not None else None,
            "walletId": obj.get("walletId"),
            "counterpartyAccountType": obj.get("counterpartyAccountType"),
            "counterpartyAccountNo": obj.get("counterpartyAccountNo"),
            "counterpartyWalletId": obj.get("counterpartyWalletId"),
            "extra": obj.get("extra")
        })
        return _obj


