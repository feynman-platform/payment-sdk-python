# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MerchantEntity(BaseModel):
    """
    MerchantEntity
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    merchant_id: Optional[StrictStr] = Field(default=None, alias="merchantId")
    public_key: Optional[StrictStr] = Field(default=None, alias="publicKey")
    name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    role: Optional[StrictInt] = Field(default=None, description="0: System manager, 1: Manager, 99: Merchant, 900: Merchant Open API, 999: Visitor")
    merchant_status: Optional[StrictInt] = Field(default=None, description="0: NORMAL, 1: DISABLED", alias="merchantStatus")
    palm_pay_virtual_account_no: Optional[StrictStr] = Field(default=None, description="PalmPay虚拟账户", alias="palmPayVirtualAccountNo")
    note: Optional[StrictStr] = None
    virtual_account_id: Optional[StrictInt] = Field(default=None, alias="virtualAccountId")
    virtual_account_id_backup: Optional[StrictInt] = Field(default=None, alias="virtualAccountIdBackup")
    tag: Optional[Annotated[str, Field(strict=True, max_length=8)]] = Field(default=None, description="商户标签，可以为空")
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "merchantId", "publicKey", "name", "email", "role", "merchantStatus", "palmPayVirtualAccountNo", "note", "virtualAccountId", "virtualAccountIdBackup", "tag", "version"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 99, 900, 999]):
            raise ValueError("must be one of enum values (0, 1, 99, 900, 999)")
        return value

    @field_validator('merchant_status')
    def merchant_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "merchantId": obj.get("merchantId"),
            "publicKey": obj.get("publicKey"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "role": obj.get("role"),
            "merchantStatus": obj.get("merchantStatus"),
            "palmPayVirtualAccountNo": obj.get("palmPayVirtualAccountNo"),
            "note": obj.get("note"),
            "virtualAccountId": obj.get("virtualAccountId"),
            "virtualAccountIdBackup": obj.get("virtualAccountIdBackup"),
            "tag": obj.get("tag"),
            "version": obj.get("version")
        })
        return _obj


