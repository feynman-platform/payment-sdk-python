# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.byte_string import ByteString
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class FileDescriptorProto(BaseModel):
    """
    FileDescriptorProto
    """ # noqa: E501
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    name_bytes: Optional[ByteString] = Field(default=None, alias="nameBytes")
    enum_type_count: Optional[StrictInt] = Field(default=None, alias="enumTypeCount")
    extension_count: Optional[StrictInt] = Field(default=None, alias="extensionCount")
    syntax: Optional[StrictStr] = None
    extension_list: Optional[List[FieldDescriptorProto]] = Field(default=None, alias="extensionList")
    extension_or_builder_list: Optional[List[FieldDescriptorProtoOrBuilder]] = Field(default=None, alias="extensionOrBuilderList")
    public_dependency_count: Optional[StrictInt] = Field(default=None, alias="publicDependencyCount")
    dependency_count: Optional[StrictInt] = Field(default=None, alias="dependencyCount")
    message_type_count: Optional[StrictInt] = Field(default=None, alias="messageTypeCount")
    service_count: Optional[StrictInt] = Field(default=None, alias="serviceCount")
    enum_type_list: Optional[List[EnumDescriptorProto]] = Field(default=None, alias="enumTypeList")
    enum_type_or_builder_list: Optional[List[EnumDescriptorProtoOrBuilder]] = Field(default=None, alias="enumTypeOrBuilderList")
    options_or_builder: Optional[FileOptionsOrBuilder] = Field(default=None, alias="optionsOrBuilder")
    edition: Optional[StrictStr] = None
    package_bytes: Optional[ByteString] = Field(default=None, alias="packageBytes")
    dependency_list: Optional[List[str]] = Field(default=None, alias="dependencyList")
    public_dependency_list: Optional[List[StrictInt]] = Field(default=None, alias="publicDependencyList")
    weak_dependency_list: Optional[List[StrictInt]] = Field(default=None, alias="weakDependencyList")
    weak_dependency_count: Optional[StrictInt] = Field(default=None, alias="weakDependencyCount")
    message_type_list: Optional[List[DescriptorProto]] = Field(default=None, alias="messageTypeList")
    message_type_or_builder_list: Optional[List[DescriptorProtoOrBuilder]] = Field(default=None, alias="messageTypeOrBuilderList")
    service_list: Optional[List[ServiceDescriptorProto]] = Field(default=None, alias="serviceList")
    service_or_builder_list: Optional[List[ServiceDescriptorProtoOrBuilder]] = Field(default=None, alias="serviceOrBuilderList")
    source_code_info: Optional[SourceCodeInfo] = Field(default=None, alias="sourceCodeInfo")
    syntax_bytes: Optional[ByteString] = Field(default=None, alias="syntaxBytes")
    source_code_info_or_builder: Optional[SourceCodeInfoOrBuilder] = Field(default=None, alias="sourceCodeInfoOrBuilder")
    initialized: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    package: Optional[StrictStr] = None
    options: Optional[FileOptions] = None
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    default_instance_for_type: Optional[FileDescriptorProto] = Field(default=None, alias="defaultInstanceForType")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    __properties: ClassVar[List[str]] = ["unknownFields", "nameBytes", "enumTypeCount", "extensionCount", "syntax", "extensionList", "extensionOrBuilderList", "publicDependencyCount", "dependencyCount", "messageTypeCount", "serviceCount", "enumTypeList", "enumTypeOrBuilderList", "optionsOrBuilder", "edition", "packageBytes", "dependencyList", "publicDependencyList", "weakDependencyList", "weakDependencyCount", "messageTypeList", "messageTypeOrBuilderList", "serviceList", "serviceOrBuilderList", "sourceCodeInfo", "syntaxBytes", "sourceCodeInfoOrBuilder", "initialized", "name", "package", "options", "serializedSize", "parserForType", "defaultInstanceForType", "initializationErrorString", "descriptorForType", "allFields", "memoizedSerializedSize"]

    @field_validator('edition')
    def edition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EDITION_UNKNOWN', 'EDITION_PROTO2', 'EDITION_PROTO3', 'EDITION_2023', 'EDITION_1_TEST_ONLY', 'EDITION_2_TEST_ONLY', 'EDITION_99997_TEST_ONLY', 'EDITION_99998_TEST_ONLY', 'EDITION_99999_TEST_ONLY']):
            raise ValueError("must be one of enum values ('EDITION_UNKNOWN', 'EDITION_PROTO2', 'EDITION_PROTO3', 'EDITION_2023', 'EDITION_1_TEST_ONLY', 'EDITION_2_TEST_ONLY', 'EDITION_99997_TEST_ONLY', 'EDITION_99998_TEST_ONLY', 'EDITION_99999_TEST_ONLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileDescriptorProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name_bytes
        if self.name_bytes:
            _dict['nameBytes'] = self.name_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extension_list (list)
        _items = []
        if self.extension_list:
            for _item_extension_list in self.extension_list:
                if _item_extension_list:
                    _items.append(_item_extension_list.to_dict())
            _dict['extensionList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extension_or_builder_list (list)
        _items = []
        if self.extension_or_builder_list:
            for _item_extension_or_builder_list in self.extension_or_builder_list:
                if _item_extension_or_builder_list:
                    _items.append(_item_extension_or_builder_list.to_dict())
            _dict['extensionOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in enum_type_list (list)
        _items = []
        if self.enum_type_list:
            for _item_enum_type_list in self.enum_type_list:
                if _item_enum_type_list:
                    _items.append(_item_enum_type_list.to_dict())
            _dict['enumTypeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in enum_type_or_builder_list (list)
        _items = []
        if self.enum_type_or_builder_list:
            for _item_enum_type_or_builder_list in self.enum_type_or_builder_list:
                if _item_enum_type_or_builder_list:
                    _items.append(_item_enum_type_or_builder_list.to_dict())
            _dict['enumTypeOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of options_or_builder
        if self.options_or_builder:
            _dict['optionsOrBuilder'] = self.options_or_builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package_bytes
        if self.package_bytes:
            _dict['packageBytes'] = self.package_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in message_type_list (list)
        _items = []
        if self.message_type_list:
            for _item_message_type_list in self.message_type_list:
                if _item_message_type_list:
                    _items.append(_item_message_type_list.to_dict())
            _dict['messageTypeList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in message_type_or_builder_list (list)
        _items = []
        if self.message_type_or_builder_list:
            for _item_message_type_or_builder_list in self.message_type_or_builder_list:
                if _item_message_type_or_builder_list:
                    _items.append(_item_message_type_or_builder_list.to_dict())
            _dict['messageTypeOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_list (list)
        _items = []
        if self.service_list:
            for _item_service_list in self.service_list:
                if _item_service_list:
                    _items.append(_item_service_list.to_dict())
            _dict['serviceList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_or_builder_list (list)
        _items = []
        if self.service_or_builder_list:
            for _item_service_or_builder_list in self.service_or_builder_list:
                if _item_service_or_builder_list:
                    _items.append(_item_service_or_builder_list.to_dict())
            _dict['serviceOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_code_info
        if self.source_code_info:
            _dict['sourceCodeInfo'] = self.source_code_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of syntax_bytes
        if self.syntax_bytes:
            _dict['syntaxBytes'] = self.syntax_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_code_info_or_builder
        if self.source_code_info_or_builder:
            _dict['sourceCodeInfoOrBuilder'] = self.source_code_info_or_builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileDescriptorProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "nameBytes": ByteString.from_dict(obj["nameBytes"]) if obj.get("nameBytes") is not None else None,
            "enumTypeCount": obj.get("enumTypeCount"),
            "extensionCount": obj.get("extensionCount"),
            "syntax": obj.get("syntax"),
            "extensionList": [FieldDescriptorProto.from_dict(_item) for _item in obj["extensionList"]] if obj.get("extensionList") is not None else None,
            "extensionOrBuilderList": [FieldDescriptorProtoOrBuilder.from_dict(_item) for _item in obj["extensionOrBuilderList"]] if obj.get("extensionOrBuilderList") is not None else None,
            "publicDependencyCount": obj.get("publicDependencyCount"),
            "dependencyCount": obj.get("dependencyCount"),
            "messageTypeCount": obj.get("messageTypeCount"),
            "serviceCount": obj.get("serviceCount"),
            "enumTypeList": [EnumDescriptorProto.from_dict(_item) for _item in obj["enumTypeList"]] if obj.get("enumTypeList") is not None else None,
            "enumTypeOrBuilderList": [EnumDescriptorProtoOrBuilder.from_dict(_item) for _item in obj["enumTypeOrBuilderList"]] if obj.get("enumTypeOrBuilderList") is not None else None,
            "optionsOrBuilder": FileOptionsOrBuilder.from_dict(obj["optionsOrBuilder"]) if obj.get("optionsOrBuilder") is not None else None,
            "edition": obj.get("edition"),
            "packageBytes": ByteString.from_dict(obj["packageBytes"]) if obj.get("packageBytes") is not None else None,
            "publicDependencyList": obj.get("publicDependencyList"),
            "weakDependencyList": obj.get("weakDependencyList"),
            "weakDependencyCount": obj.get("weakDependencyCount"),
            "messageTypeList": [DescriptorProto.from_dict(_item) for _item in obj["messageTypeList"]] if obj.get("messageTypeList") is not None else None,
            "messageTypeOrBuilderList": [DescriptorProtoOrBuilder.from_dict(_item) for _item in obj["messageTypeOrBuilderList"]] if obj.get("messageTypeOrBuilderList") is not None else None,
            "serviceList": [ServiceDescriptorProto.from_dict(_item) for _item in obj["serviceList"]] if obj.get("serviceList") is not None else None,
            "serviceOrBuilderList": [ServiceDescriptorProtoOrBuilder.from_dict(_item) for _item in obj["serviceOrBuilderList"]] if obj.get("serviceOrBuilderList") is not None else None,
            "sourceCodeInfo": SourceCodeInfo.from_dict(obj["sourceCodeInfo"]) if obj.get("sourceCodeInfo") is not None else None,
            "syntaxBytes": ByteString.from_dict(obj["syntaxBytes"]) if obj.get("syntaxBytes") is not None else None,
            "sourceCodeInfoOrBuilder": SourceCodeInfoOrBuilder.from_dict(obj["sourceCodeInfoOrBuilder"]) if obj.get("sourceCodeInfoOrBuilder") is not None else None,
            "initialized": obj.get("initialized"),
            "name": obj.get("name"),
            "package": obj.get("package"),
            "options": FileOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "serializedSize": obj.get("serializedSize"),
            "parserForType": obj.get("parserForType"),
            "defaultInstanceForType": FileDescriptorProto.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "initializationErrorString": obj.get("initializationErrorString"),
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "allFields": obj.get("allFields"),
            "memoizedSerializedSize": obj.get("memoizedSerializedSize")
        })
        return _obj

from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.descriptor_proto import DescriptorProto
from buybtcpay.models.descriptor_proto_or_builder import DescriptorProtoOrBuilder
from buybtcpay.models.enum_descriptor_proto import EnumDescriptorProto
from buybtcpay.models.enum_descriptor_proto_or_builder import EnumDescriptorProtoOrBuilder
from buybtcpay.models.field_descriptor_proto import FieldDescriptorProto
from buybtcpay.models.field_descriptor_proto_or_builder import FieldDescriptorProtoOrBuilder
from buybtcpay.models.file_options import FileOptions
from buybtcpay.models.file_options_or_builder import FileOptionsOrBuilder
from buybtcpay.models.service_descriptor_proto import ServiceDescriptorProto
from buybtcpay.models.service_descriptor_proto_or_builder import ServiceDescriptorProtoOrBuilder
from buybtcpay.models.source_code_info import SourceCodeInfo
from buybtcpay.models.source_code_info_or_builder import SourceCodeInfoOrBuilder
# TODO: Rewrite to not use raise_errors
FileDescriptorProto.model_rebuild(raise_errors=False)

