# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from buybtcpay.models.byte_string import ByteString
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class UninterpretedOptionOrBuilder(BaseModel):
    """
    UninterpretedOptionOrBuilder
    """ # noqa: E501
    name_list: Optional[List[NamePart]] = Field(default=None, alias="nameList")
    name_or_builder_list: Optional[List[NamePartOrBuilder]] = Field(default=None, alias="nameOrBuilderList")
    identifier_value_bytes: Optional[ByteString] = Field(default=None, alias="identifierValueBytes")
    positive_int_value: Optional[StrictInt] = Field(default=None, alias="positiveIntValue")
    negative_int_value: Optional[StrictInt] = Field(default=None, alias="negativeIntValue")
    aggregate_value: Optional[StrictStr] = Field(default=None, alias="aggregateValue")
    aggregate_value_bytes: Optional[ByteString] = Field(default=None, alias="aggregateValueBytes")
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="doubleValue")
    name_count: Optional[StrictInt] = Field(default=None, alias="nameCount")
    string_value: Optional[ByteString] = Field(default=None, alias="stringValue")
    identifier_value: Optional[StrictStr] = Field(default=None, alias="identifierValue")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    default_instance_for_type: Optional[Message] = Field(default=None, alias="defaultInstanceForType")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    initialized: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["nameList", "nameOrBuilderList", "identifierValueBytes", "positiveIntValue", "negativeIntValue", "aggregateValue", "aggregateValueBytes", "doubleValue", "nameCount", "stringValue", "identifierValue", "initializationErrorString", "defaultInstanceForType", "descriptorForType", "allFields", "unknownFields", "initialized"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UninterpretedOptionOrBuilder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in name_list (list)
        _items = []
        if self.name_list:
            for _item_name_list in self.name_list:
                if _item_name_list:
                    _items.append(_item_name_list.to_dict())
            _dict['nameList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in name_or_builder_list (list)
        _items = []
        if self.name_or_builder_list:
            for _item_name_or_builder_list in self.name_or_builder_list:
                if _item_name_or_builder_list:
                    _items.append(_item_name_or_builder_list.to_dict())
            _dict['nameOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of identifier_value_bytes
        if self.identifier_value_bytes:
            _dict['identifierValueBytes'] = self.identifier_value_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aggregate_value_bytes
        if self.aggregate_value_bytes:
            _dict['aggregateValueBytes'] = self.aggregate_value_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_value
        if self.string_value:
            _dict['stringValue'] = self.string_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UninterpretedOptionOrBuilder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nameList": [NamePart.from_dict(_item) for _item in obj["nameList"]] if obj.get("nameList") is not None else None,
            "nameOrBuilderList": [NamePartOrBuilder.from_dict(_item) for _item in obj["nameOrBuilderList"]] if obj.get("nameOrBuilderList") is not None else None,
            "identifierValueBytes": ByteString.from_dict(obj["identifierValueBytes"]) if obj.get("identifierValueBytes") is not None else None,
            "positiveIntValue": obj.get("positiveIntValue"),
            "negativeIntValue": obj.get("negativeIntValue"),
            "aggregateValue": obj.get("aggregateValue"),
            "aggregateValueBytes": ByteString.from_dict(obj["aggregateValueBytes"]) if obj.get("aggregateValueBytes") is not None else None,
            "doubleValue": obj.get("doubleValue"),
            "nameCount": obj.get("nameCount"),
            "stringValue": ByteString.from_dict(obj["stringValue"]) if obj.get("stringValue") is not None else None,
            "identifierValue": obj.get("identifierValue"),
            "initializationErrorString": obj.get("initializationErrorString"),
            "defaultInstanceForType": Message.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "allFields": obj.get("allFields"),
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "initialized": obj.get("initialized")
        })
        return _obj

from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.message import Message
from buybtcpay.models.name_part import NamePart
from buybtcpay.models.name_part_or_builder import NamePartOrBuilder
# TODO: Rewrite to not use raise_errors
UninterpretedOptionOrBuilder.model_rebuild(raise_errors=False)

