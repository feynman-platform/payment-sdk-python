# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.buy_btc_money_json_value import BuyBtcMoneyJsonValue
from typing import Optional, Set
from typing_extensions import Self

class PaymentOrderEntity(BaseModel):
    """
    支付单
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    merchant_id: Optional[StrictStr] = Field(default=None, description="该支付单所属商户ID", alias="merchantId")
    channel_id: Optional[StrictStr] = Field(default=None, description="支付链路ID，跟踪支付流程，记账的业务ID也用这个", alias="channelId")
    type: Optional[StrictInt] = Field(default=None, description="0: Merchant to merchant, 1: Withdrawal")
    amount: Optional[BuyBtcMoneyJsonValue] = None
    fee: Optional[BuyBtcMoneyJsonValue] = None
    params: Optional[Dict[str, Dict[str, Any]]] = None
    order_status: Optional[StrictInt] = Field(default=None, description="0: UNPAID, 1: PAYING, 2: SUCCESS, 3: FAIL, 4: CLOSE, 20: REFUNDED", alias="orderStatus")
    prepayment_order_id: Optional[StrictInt] = Field(default=None, alias="prepaymentOrderId")
    bill_id: Optional[StrictInt] = Field(default=None, description="存储最后一次的流水号", alias="billId")
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "orderId", "merchantId", "channelId", "type", "amount", "fee", "params", "orderStatus", "prepaymentOrderId", "billId", "version"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 20]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 20)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentOrderEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentOrderEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "orderId": obj.get("orderId"),
            "merchantId": obj.get("merchantId"),
            "channelId": obj.get("channelId"),
            "type": obj.get("type"),
            "amount": BuyBtcMoneyJsonValue.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "fee": BuyBtcMoneyJsonValue.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "params": obj.get("params"),
            "orderStatus": obj.get("orderStatus"),
            "prepaymentOrderId": obj.get("prepaymentOrderId"),
            "billId": obj.get("billId"),
            "version": obj.get("version")
        })
        return _obj


