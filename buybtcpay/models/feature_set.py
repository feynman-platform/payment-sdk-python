# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class FeatureSet(BaseModel):
    """
    FeatureSet
    """ # noqa: E501
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    json_format: Optional[StrictStr] = Field(default=None, alias="jsonFormat")
    repeated_field_encoding: Optional[StrictStr] = Field(default=None, alias="repeatedFieldEncoding")
    utf8_validation: Optional[StrictStr] = Field(default=None, alias="utf8Validation")
    initialized: Optional[StrictBool] = None
    enum_type: Optional[StrictStr] = Field(default=None, alias="enumType")
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    default_instance_for_type: Optional[FeatureSet] = Field(default=None, alias="defaultInstanceForType")
    message_encoding: Optional[StrictStr] = Field(default=None, alias="messageEncoding")
    field_presence: Optional[StrictStr] = Field(default=None, alias="fieldPresence")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    all_fields_raw: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFieldsRaw")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    __properties: ClassVar[List[str]] = ["unknownFields", "jsonFormat", "repeatedFieldEncoding", "utf8Validation", "initialized", "enumType", "serializedSize", "parserForType", "defaultInstanceForType", "messageEncoding", "fieldPresence", "allFields", "allFieldsRaw", "initializationErrorString", "descriptorForType", "memoizedSerializedSize"]

    @field_validator('json_format')
    def json_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JSON_FORMAT_UNKNOWN', 'ALLOW', 'LEGACY_BEST_EFFORT']):
            raise ValueError("must be one of enum values ('JSON_FORMAT_UNKNOWN', 'ALLOW', 'LEGACY_BEST_EFFORT')")
        return value

    @field_validator('repeated_field_encoding')
    def repeated_field_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REPEATED_FIELD_ENCODING_UNKNOWN', 'PACKED', 'EXPANDED']):
            raise ValueError("must be one of enum values ('REPEATED_FIELD_ENCODING_UNKNOWN', 'PACKED', 'EXPANDED')")
        return value

    @field_validator('utf8_validation')
    def utf8_validation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UTF8_VALIDATION_UNKNOWN', 'NONE', 'VERIFY']):
            raise ValueError("must be one of enum values ('UTF8_VALIDATION_UNKNOWN', 'NONE', 'VERIFY')")
        return value

    @field_validator('enum_type')
    def enum_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENUM_TYPE_UNKNOWN', 'OPEN', 'CLOSED']):
            raise ValueError("must be one of enum values ('ENUM_TYPE_UNKNOWN', 'OPEN', 'CLOSED')")
        return value

    @field_validator('message_encoding')
    def message_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MESSAGE_ENCODING_UNKNOWN', 'LENGTH_PREFIXED', 'DELIMITED']):
            raise ValueError("must be one of enum values ('MESSAGE_ENCODING_UNKNOWN', 'LENGTH_PREFIXED', 'DELIMITED')")
        return value

    @field_validator('field_presence')
    def field_presence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIELD_PRESENCE_UNKNOWN', 'EXPLICIT', 'IMPLICIT', 'LEGACY_REQUIRED']):
            raise ValueError("must be one of enum values ('FIELD_PRESENCE_UNKNOWN', 'EXPLICIT', 'IMPLICIT', 'LEGACY_REQUIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeatureSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeatureSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "jsonFormat": obj.get("jsonFormat"),
            "repeatedFieldEncoding": obj.get("repeatedFieldEncoding"),
            "utf8Validation": obj.get("utf8Validation"),
            "initialized": obj.get("initialized"),
            "enumType": obj.get("enumType"),
            "serializedSize": obj.get("serializedSize"),
            "parserForType": obj.get("parserForType"),
            "defaultInstanceForType": FeatureSet.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "messageEncoding": obj.get("messageEncoding"),
            "fieldPresence": obj.get("fieldPresence"),
            "allFields": obj.get("allFields"),
            "allFieldsRaw": obj.get("allFieldsRaw"),
            "initializationErrorString": obj.get("initializationErrorString"),
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "memoizedSerializedSize": obj.get("memoizedSerializedSize")
        })
        return _obj

from buybtcpay.models.descriptor import Descriptor
# TODO: Rewrite to not use raise_errors
FeatureSet.model_rebuild(raise_errors=False)

