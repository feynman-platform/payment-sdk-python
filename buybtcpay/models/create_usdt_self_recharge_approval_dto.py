# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateUSDTSelfRechargeApprovalDto(BaseModel):
    """
    CreateUSDTSelfRechargeApprovalDto
    """ # noqa: E501
    source_amount: Annotated[str, Field(strict=True)] = Field(alias="sourceAmount")
    exchange_rate_id: Optional[StrictStr] = Field(default=None, description="源币种兑换目标币种的汇率ID，不用填，由系统设置", alias="exchangeRateId")
    exchange_rate: Optional[StrictStr] = Field(default=None, description="源币种兑换目标币种的汇率，不用填，由系统设置", alias="exchangeRate")
    exchange_rate_source: Optional[StrictStr] = Field(default=None, description="币种汇率来源", alias="exchangeRateSource")
    payee_wallet_address: Optional[StrictStr] = Field(default=None, description="不用填，由系统自动生成", alias="payeeWalletAddress")
    target_amount: Optional[StrictStr] = Field(default=None, description="不用填，由系统自动计算", alias="targetAmount")
    amount: Optional[StrictStr] = Field(default=None, description="根据汇率计算出最终金额，单位为对应币种的最小单位，不用填，由系统自动计算")
    wallet_id: StrictStr = Field(description="目前要求是资金账户", alias="walletId")
    note: Optional[StrictStr] = None
    timeout: Optional[StrictInt] = Field(default=None, description="审批单超时时间，超过时间后自动关闭，单位秒")
    user_submitted: Optional[StrictBool] = Field(default=None, alias="userSubmitted")
    received: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["sourceAmount", "exchangeRateId", "exchangeRate", "exchangeRateSource", "payeeWalletAddress", "targetAmount", "amount", "walletId", "note", "timeout", "userSubmitted", "received"]

    @field_validator('source_amount')
    def source_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[1-9]\d*$", value):
            raise ValueError(r"must validate the regular expression /^[1-9]\d*$/")
        return value

    @field_validator('exchange_rate_source')
    def exchange_rate_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1']):
            raise ValueError("must be one of enum values ('1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUSDTSelfRechargeApprovalDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUSDTSelfRechargeApprovalDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceAmount": obj.get("sourceAmount"),
            "exchangeRateId": obj.get("exchangeRateId"),
            "exchangeRate": obj.get("exchangeRate"),
            "exchangeRateSource": obj.get("exchangeRateSource"),
            "payeeWalletAddress": obj.get("payeeWalletAddress"),
            "targetAmount": obj.get("targetAmount"),
            "amount": obj.get("amount"),
            "walletId": obj.get("walletId"),
            "note": obj.get("note"),
            "timeout": obj.get("timeout"),
            "userSubmitted": obj.get("userSubmitted"),
            "received": obj.get("received")
        })
        return _obj


