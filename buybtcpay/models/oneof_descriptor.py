# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OneofDescriptor(BaseModel):
    """
    OneofDescriptor
    """ # noqa: E501
    index: Optional[StrictInt] = None
    proto: Optional[OneofDescriptorProto] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    file: Optional[FileDescriptor] = None
    containing_type: Optional[Descriptor] = Field(default=None, alias="containingType")
    field_count: Optional[StrictInt] = Field(default=None, alias="fieldCount")
    name: Optional[StrictStr] = None
    synthetic: Optional[StrictBool] = None
    options: Optional[OneofOptions] = None
    __properties: ClassVar[List[str]] = ["index", "proto", "fullName", "file", "containingType", "fieldCount", "name", "synthetic", "options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OneofDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of proto
        if self.proto:
            _dict['proto'] = self.proto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of containing_type
        if self.containing_type:
            _dict['containingType'] = self.containing_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OneofDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index": obj.get("index"),
            "proto": OneofDescriptorProto.from_dict(obj["proto"]) if obj.get("proto") is not None else None,
            "fullName": obj.get("fullName"),
            "file": FileDescriptor.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "containingType": Descriptor.from_dict(obj["containingType"]) if obj.get("containingType") is not None else None,
            "fieldCount": obj.get("fieldCount"),
            "name": obj.get("name"),
            "synthetic": obj.get("synthetic"),
            "options": OneofOptions.from_dict(obj["options"]) if obj.get("options") is not None else None
        })
        return _obj

from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.file_descriptor import FileDescriptor
from buybtcpay.models.oneof_descriptor_proto import OneofDescriptorProto
from buybtcpay.models.oneof_options import OneofOptions
# TODO: Rewrite to not use raise_errors
OneofDescriptor.model_rebuild(raise_errors=False)

