# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateUnfronzenApprovalDto(BaseModel):
    """
    CreateUnfronzenApprovalDto
    """ # noqa: E501
    amount: StrictStr = Field(description="货币标准计量单位，注意，此处是字符类型。金额不能大于商户的冻结金额")
    wallet_id: StrictStr = Field(description="商户钱包ID", alias="walletId")
    note: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="可选")
    dmerchant_id: Optional[StrictStr] = Field(default=None, alias="dmerchantId")
    dcurrency_type: Optional[StrictStr] = Field(default=None, description="货币类型", alias="dcurrencyType")
    __properties: ClassVar[List[str]] = ["amount", "walletId", "note", "dmerchantId", "dcurrencyType"]

    @field_validator('dcurrency_type')
    def dcurrency_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NGN', 'GHS', 'ETH', 'BTC', 'USDT']):
            raise ValueError("must be one of enum values ('NGN', 'GHS', 'ETH', 'BTC', 'USDT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUnfronzenApprovalDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUnfronzenApprovalDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "walletId": obj.get("walletId"),
            "note": obj.get("note"),
            "dmerchantId": obj.get("dmerchantId"),
            "dcurrencyType": obj.get("dcurrencyType")
        })
        return _obj


