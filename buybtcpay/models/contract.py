# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.any import Any
from buybtcpay.models.any_or_builder import AnyOrBuilder
from buybtcpay.models.byte_string import ByteString
from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class Contract(BaseModel):
    """
    Contract
    """ # noqa: E501
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    parameter_or_builder: Optional[AnyOrBuilder] = Field(default=None, alias="parameterOrBuilder")
    contract_name: Optional[ByteString] = Field(default=None, alias="contractName")
    permission_id: Optional[StrictInt] = Field(default=None, alias="permissionId")
    initialized: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    provider: Optional[ByteString] = None
    parameter: Optional[Any] = None
    type_value: Optional[StrictInt] = Field(default=None, alias="typeValue")
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    default_instance_for_type: Optional[Contract] = Field(default=None, alias="defaultInstanceForType")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    __properties: ClassVar[List[str]] = ["unknownFields", "parameterOrBuilder", "contractName", "permissionId", "initialized", "type", "provider", "parameter", "typeValue", "serializedSize", "parserForType", "defaultInstanceForType", "initializationErrorString", "descriptorForType", "allFields", "memoizedSerializedSize"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AccountCreateContract', 'TransferContract', 'TransferAssetContract', 'VoteAssetContract', 'VoteWitnessContract', 'WitnessCreateContract', 'AssetIssueContract', 'WitnessUpdateContract', 'ParticipateAssetIssueContract', 'AccountUpdateContract', 'FreezeBalanceContract', 'UnfreezeBalanceContract', 'WithdrawBalanceContract', 'UnfreezeAssetContract', 'UpdateAssetContract', 'ProposalCreateContract', 'ProposalApproveContract', 'ProposalDeleteContract', 'SetAccountIdContract', 'CustomContract', 'CreateSmartContract', 'TriggerSmartContract', 'GetContract', 'UpdateSettingContract', 'ExchangeCreateContract', 'ExchangeInjectContract', 'ExchangeWithdrawContract', 'ExchangeTransactionContract', 'UpdateEnergyLimitContract', 'AccountPermissionUpdateContract', 'ClearABIContract', 'UpdateBrokerageContract', 'ShieldedTransferContract', 'MarketSellAssetContract', 'MarketCancelOrderContract', 'FreezeBalanceV2Contract', 'UnfreezeBalanceV2Contract', 'WithdrawExpireUnfreezeContract', 'DelegateResourceContract', 'UnDelegateResourceContract', 'CancelAllUnfreezeV2Contract', 'UNRECOGNIZED']):
            raise ValueError("must be one of enum values ('AccountCreateContract', 'TransferContract', 'TransferAssetContract', 'VoteAssetContract', 'VoteWitnessContract', 'WitnessCreateContract', 'AssetIssueContract', 'WitnessUpdateContract', 'ParticipateAssetIssueContract', 'AccountUpdateContract', 'FreezeBalanceContract', 'UnfreezeBalanceContract', 'WithdrawBalanceContract', 'UnfreezeAssetContract', 'UpdateAssetContract', 'ProposalCreateContract', 'ProposalApproveContract', 'ProposalDeleteContract', 'SetAccountIdContract', 'CustomContract', 'CreateSmartContract', 'TriggerSmartContract', 'GetContract', 'UpdateSettingContract', 'ExchangeCreateContract', 'ExchangeInjectContract', 'ExchangeWithdrawContract', 'ExchangeTransactionContract', 'UpdateEnergyLimitContract', 'AccountPermissionUpdateContract', 'ClearABIContract', 'UpdateBrokerageContract', 'ShieldedTransferContract', 'MarketSellAssetContract', 'MarketCancelOrderContract', 'FreezeBalanceV2Contract', 'UnfreezeBalanceV2Contract', 'WithdrawExpireUnfreezeContract', 'DelegateResourceContract', 'UnDelegateResourceContract', 'CancelAllUnfreezeV2Contract', 'UNRECOGNIZED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameter_or_builder
        if self.parameter_or_builder:
            _dict['parameterOrBuilder'] = self.parameter_or_builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract_name
        if self.contract_name:
            _dict['contractName'] = self.contract_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameter
        if self.parameter:
            _dict['parameter'] = self.parameter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "parameterOrBuilder": AnyOrBuilder.from_dict(obj["parameterOrBuilder"]) if obj.get("parameterOrBuilder") is not None else None,
            "contractName": ByteString.from_dict(obj["contractName"]) if obj.get("contractName") is not None else None,
            "permissionId": obj.get("permissionId"),
            "initialized": obj.get("initialized"),
            "type": obj.get("type"),
            "provider": ByteString.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "parameter": Any.from_dict(obj["parameter"]) if obj.get("parameter") is not None else None,
            "typeValue": obj.get("typeValue"),
            "serializedSize": obj.get("serializedSize"),
            "parserForType": obj.get("parserForType"),
            "defaultInstanceForType": Contract.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "initializationErrorString": obj.get("initializationErrorString"),
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "allFields": obj.get("allFields"),
            "memoizedSerializedSize": obj.get("memoizedSerializedSize")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Contract.model_rebuild(raise_errors=False)

