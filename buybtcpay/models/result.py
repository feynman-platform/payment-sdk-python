# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.byte_string import ByteString
from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.market_order_detail import MarketOrderDetail
from buybtcpay.models.market_order_detail_or_builder import MarketOrderDetailOrBuilder
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class Result(BaseModel):
    """
    Result
    """ # noqa: E501
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    ret: Optional[StrictStr] = None
    asset_issue_id: Optional[StrictStr] = Field(default=None, alias="assetIssueID")
    asset_issue_id_bytes: Optional[ByteString] = Field(default=None, alias="assetIssueIDBytes")
    withdraw_amount: Optional[StrictInt] = Field(default=None, alias="withdrawAmount")
    unfreeze_amount: Optional[StrictInt] = Field(default=None, alias="unfreezeAmount")
    exchange_received_amount: Optional[StrictInt] = Field(default=None, alias="exchangeReceivedAmount")
    exchange_inject_another_amount: Optional[StrictInt] = Field(default=None, alias="exchangeInjectAnotherAmount")
    exchange_withdraw_another_amount: Optional[StrictInt] = Field(default=None, alias="exchangeWithdrawAnotherAmount")
    shielded_transaction_fee: Optional[StrictInt] = Field(default=None, alias="shieldedTransactionFee")
    order_details_list: Optional[List[MarketOrderDetail]] = Field(default=None, alias="orderDetailsList")
    order_details_or_builder_list: Optional[List[MarketOrderDetailOrBuilder]] = Field(default=None, alias="orderDetailsOrBuilderList")
    order_details_count: Optional[StrictInt] = Field(default=None, alias="orderDetailsCount")
    withdraw_expire_amount: Optional[StrictInt] = Field(default=None, alias="withdrawExpireAmount")
    cancel_unfreeze_v2_amount_count: Optional[StrictInt] = Field(default=None, alias="cancelUnfreezeV2AmountCount")
    cancel_unfreeze_v2_amount: Optional[Dict[str, StrictInt]] = Field(default=None, alias="cancelUnfreezeV2Amount")
    cancel_unfreeze_v2_amount_map: Optional[Dict[str, StrictInt]] = Field(default=None, alias="cancelUnfreezeV2AmountMap")
    ret_value: Optional[StrictInt] = Field(default=None, alias="retValue")
    contract_ret_value: Optional[StrictInt] = Field(default=None, alias="contractRetValue")
    contract_ret: Optional[StrictStr] = Field(default=None, alias="contractRet")
    initialized: Optional[StrictBool] = None
    order_id: Optional[ByteString] = Field(default=None, alias="orderId")
    fee: Optional[StrictInt] = None
    exchange_id: Optional[StrictInt] = Field(default=None, alias="exchangeId")
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    default_instance_for_type: Optional[Result] = Field(default=None, alias="defaultInstanceForType")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    __properties: ClassVar[List[str]] = ["unknownFields", "ret", "assetIssueID", "assetIssueIDBytes", "withdrawAmount", "unfreezeAmount", "exchangeReceivedAmount", "exchangeInjectAnotherAmount", "exchangeWithdrawAnotherAmount", "shieldedTransactionFee", "orderDetailsList", "orderDetailsOrBuilderList", "orderDetailsCount", "withdrawExpireAmount", "cancelUnfreezeV2AmountCount", "cancelUnfreezeV2Amount", "cancelUnfreezeV2AmountMap", "retValue", "contractRetValue", "contractRet", "initialized", "orderId", "fee", "exchangeId", "serializedSize", "parserForType", "defaultInstanceForType", "initializationErrorString", "descriptorForType", "allFields", "memoizedSerializedSize"]

    @field_validator('ret')
    def ret_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUCESS', 'FAILED', 'UNRECOGNIZED']):
            raise ValueError("must be one of enum values ('SUCESS', 'FAILED', 'UNRECOGNIZED')")
        return value

    @field_validator('contract_ret')
    def contract_ret_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'SUCCESS', 'REVERT', 'BAD_JUMP_DESTINATION', 'OUT_OF_MEMORY', 'PRECOMPILED_CONTRACT', 'STACK_TOO_SMALL', 'STACK_TOO_LARGE', 'ILLEGAL_OPERATION', 'STACK_OVERFLOW', 'OUT_OF_ENERGY', 'OUT_OF_TIME', 'JVM_STACK_OVER_FLOW', 'UNKNOWN', 'TRANSFER_FAILED', 'INVALID_CODE', 'UNRECOGNIZED']):
            raise ValueError("must be one of enum values ('DEFAULT', 'SUCCESS', 'REVERT', 'BAD_JUMP_DESTINATION', 'OUT_OF_MEMORY', 'PRECOMPILED_CONTRACT', 'STACK_TOO_SMALL', 'STACK_TOO_LARGE', 'ILLEGAL_OPERATION', 'STACK_OVERFLOW', 'OUT_OF_ENERGY', 'OUT_OF_TIME', 'JVM_STACK_OVER_FLOW', 'UNKNOWN', 'TRANSFER_FAILED', 'INVALID_CODE', 'UNRECOGNIZED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset_issue_id_bytes
        if self.asset_issue_id_bytes:
            _dict['assetIssueIDBytes'] = self.asset_issue_id_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_details_list (list)
        _items = []
        if self.order_details_list:
            for _item_order_details_list in self.order_details_list:
                if _item_order_details_list:
                    _items.append(_item_order_details_list.to_dict())
            _dict['orderDetailsList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_details_or_builder_list (list)
        _items = []
        if self.order_details_or_builder_list:
            for _item_order_details_or_builder_list in self.order_details_or_builder_list:
                if _item_order_details_or_builder_list:
                    _items.append(_item_order_details_or_builder_list.to_dict())
            _dict['orderDetailsOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of order_id
        if self.order_id:
            _dict['orderId'] = self.order_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "ret": obj.get("ret"),
            "assetIssueID": obj.get("assetIssueID"),
            "assetIssueIDBytes": ByteString.from_dict(obj["assetIssueIDBytes"]) if obj.get("assetIssueIDBytes") is not None else None,
            "withdrawAmount": obj.get("withdrawAmount"),
            "unfreezeAmount": obj.get("unfreezeAmount"),
            "exchangeReceivedAmount": obj.get("exchangeReceivedAmount"),
            "exchangeInjectAnotherAmount": obj.get("exchangeInjectAnotherAmount"),
            "exchangeWithdrawAnotherAmount": obj.get("exchangeWithdrawAnotherAmount"),
            "shieldedTransactionFee": obj.get("shieldedTransactionFee"),
            "orderDetailsList": [MarketOrderDetail.from_dict(_item) for _item in obj["orderDetailsList"]] if obj.get("orderDetailsList") is not None else None,
            "orderDetailsOrBuilderList": [MarketOrderDetailOrBuilder.from_dict(_item) for _item in obj["orderDetailsOrBuilderList"]] if obj.get("orderDetailsOrBuilderList") is not None else None,
            "orderDetailsCount": obj.get("orderDetailsCount"),
            "withdrawExpireAmount": obj.get("withdrawExpireAmount"),
            "cancelUnfreezeV2AmountCount": obj.get("cancelUnfreezeV2AmountCount"),
            "cancelUnfreezeV2Amount": obj.get("cancelUnfreezeV2Amount"),
            "cancelUnfreezeV2AmountMap": obj.get("cancelUnfreezeV2AmountMap"),
            "retValue": obj.get("retValue"),
            "contractRetValue": obj.get("contractRetValue"),
            "contractRet": obj.get("contractRet"),
            "initialized": obj.get("initialized"),
            "orderId": ByteString.from_dict(obj["orderId"]) if obj.get("orderId") is not None else None,
            "fee": obj.get("fee"),
            "exchangeId": obj.get("exchangeId"),
            "serializedSize": obj.get("serializedSize"),
            "parserForType": obj.get("parserForType"),
            "defaultInstanceForType": Result.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "initializationErrorString": obj.get("initializationErrorString"),
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "allFields": obj.get("allFields"),
            "memoizedSerializedSize": obj.get("memoizedSerializedSize")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Result.model_rebuild(raise_errors=False)

