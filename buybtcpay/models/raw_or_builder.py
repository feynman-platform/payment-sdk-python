# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.authority import Authority
from buybtcpay.models.authority_or_builder import AuthorityOrBuilder
from buybtcpay.models.byte_string import ByteString
from buybtcpay.models.contract import Contract
from buybtcpay.models.contract_or_builder import ContractOrBuilder
from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.message import Message
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class RawOrBuilder(BaseModel):
    """
    RawOrBuilder
    """ # noqa: E501
    ref_block_bytes: Optional[ByteString] = Field(default=None, alias="refBlockBytes")
    ref_block_num: Optional[StrictInt] = Field(default=None, alias="refBlockNum")
    ref_block_hash: Optional[ByteString] = Field(default=None, alias="refBlockHash")
    auths_list: Optional[List[Authority]] = Field(default=None, alias="authsList")
    auths_count: Optional[StrictInt] = Field(default=None, alias="authsCount")
    auths_or_builder_list: Optional[List[AuthorityOrBuilder]] = Field(default=None, alias="authsOrBuilderList")
    contract_count: Optional[StrictInt] = Field(default=None, alias="contractCount")
    contract_or_builder_list: Optional[List[ContractOrBuilder]] = Field(default=None, alias="contractOrBuilderList")
    fee_limit: Optional[StrictInt] = Field(default=None, alias="feeLimit")
    timestamp: Optional[StrictInt] = None
    data: Optional[ByteString] = None
    contract_list: Optional[List[Contract]] = Field(default=None, alias="contractList")
    scripts: Optional[ByteString] = None
    expiration: Optional[StrictInt] = None
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    default_instance_for_type: Optional[Message] = Field(default=None, alias="defaultInstanceForType")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    initialized: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["refBlockBytes", "refBlockNum", "refBlockHash", "authsList", "authsCount", "authsOrBuilderList", "contractCount", "contractOrBuilderList", "feeLimit", "timestamp", "data", "contractList", "scripts", "expiration", "initializationErrorString", "defaultInstanceForType", "descriptorForType", "allFields", "unknownFields", "initialized"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawOrBuilder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ref_block_bytes
        if self.ref_block_bytes:
            _dict['refBlockBytes'] = self.ref_block_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ref_block_hash
        if self.ref_block_hash:
            _dict['refBlockHash'] = self.ref_block_hash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in auths_list (list)
        _items = []
        if self.auths_list:
            for _item_auths_list in self.auths_list:
                if _item_auths_list:
                    _items.append(_item_auths_list.to_dict())
            _dict['authsList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in auths_or_builder_list (list)
        _items = []
        if self.auths_or_builder_list:
            for _item_auths_or_builder_list in self.auths_or_builder_list:
                if _item_auths_or_builder_list:
                    _items.append(_item_auths_or_builder_list.to_dict())
            _dict['authsOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contract_or_builder_list (list)
        _items = []
        if self.contract_or_builder_list:
            for _item_contract_or_builder_list in self.contract_or_builder_list:
                if _item_contract_or_builder_list:
                    _items.append(_item_contract_or_builder_list.to_dict())
            _dict['contractOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contract_list (list)
        _items = []
        if self.contract_list:
            for _item_contract_list in self.contract_list:
                if _item_contract_list:
                    _items.append(_item_contract_list.to_dict())
            _dict['contractList'] = _items
        # override the default output from pydantic by calling `to_dict()` of scripts
        if self.scripts:
            _dict['scripts'] = self.scripts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawOrBuilder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "refBlockBytes": ByteString.from_dict(obj["refBlockBytes"]) if obj.get("refBlockBytes") is not None else None,
            "refBlockNum": obj.get("refBlockNum"),
            "refBlockHash": ByteString.from_dict(obj["refBlockHash"]) if obj.get("refBlockHash") is not None else None,
            "authsList": [Authority.from_dict(_item) for _item in obj["authsList"]] if obj.get("authsList") is not None else None,
            "authsCount": obj.get("authsCount"),
            "authsOrBuilderList": [AuthorityOrBuilder.from_dict(_item) for _item in obj["authsOrBuilderList"]] if obj.get("authsOrBuilderList") is not None else None,
            "contractCount": obj.get("contractCount"),
            "contractOrBuilderList": [ContractOrBuilder.from_dict(_item) for _item in obj["contractOrBuilderList"]] if obj.get("contractOrBuilderList") is not None else None,
            "feeLimit": obj.get("feeLimit"),
            "timestamp": obj.get("timestamp"),
            "data": ByteString.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "contractList": [Contract.from_dict(_item) for _item in obj["contractList"]] if obj.get("contractList") is not None else None,
            "scripts": ByteString.from_dict(obj["scripts"]) if obj.get("scripts") is not None else None,
            "expiration": obj.get("expiration"),
            "initializationErrorString": obj.get("initializationErrorString"),
            "defaultInstanceForType": Message.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "allFields": obj.get("allFields"),
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "initialized": obj.get("initialized")
        })
        return _obj


