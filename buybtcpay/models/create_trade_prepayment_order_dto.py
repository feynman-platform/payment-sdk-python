# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from buybtcpay.models.verification import Verification
from typing import Optional, Set
from typing_extensions import Self

class CreateTradePrepaymentOrderDto(BaseModel):
    """
    创建交易业务预付单，冻结商户交易账户金额
    """ # noqa: E501
    verification: Optional[Verification] = None
    request_time: Annotated[str, Field(min_length=13, strict=True, max_length=2147483647)] = Field(description="请注意，此处是字符类型，不是数值", alias="requestTime")
    version: Annotated[str, Field(strict=True)] = Field(description="保留字段，暂时无用")
    nonce: Annotated[str, Field(min_length=32, strict=True, max_length=32)] = Field(description="最大32位，用于防止重放攻击")
    business_id: StrictStr = Field(description="第三方业务ID，由调用方生成，用于标识订单的唯一性", alias="businessId")
    operator: StrictStr = Field(description="发起交易的商户ID")
    amount: StrictStr = Field(description="预付金额，为方便前端调用，请传标准单位，比如想要转1.23元，直接传1.23即可，系统会将其转为最小单位：123分")
    currency: StrictStr = Field(description="NGN: Nigerian Naira, GHS: Ghanaian Cedi, ETH: Ethereum, BTC: Bitcoin, USDT: Tether")
    wallet_id: Optional[StrictStr] = Field(default=None, description="如果不传，则会查找商户下的资金钱包", alias="walletId")
    auto_choose_wallet: Optional[StrictBool] = Field(default=None, description="如果指定的钱包余额不足，系统主动查找余额最多的钱包支付", alias="autoChooseWallet")
    __properties: ClassVar[List[str]] = ["verification", "requestTime", "version", "nonce", "businessId", "operator", "amount", "currency", "walletId", "autoChooseWallet"]

    @field_validator('request_time')
    def request_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+$/")
        return value

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^v\d+\.\d+$", value):
            raise ValueError(r"must validate the regular expression /^v\d+\.\d+$/")
        return value

    @field_validator('nonce')
    def nonce_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9 ]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9 ]+$/")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NGN', 'GHS', 'ETH', 'BTC', 'USDT']):
            raise ValueError("must be one of enum values ('NGN', 'GHS', 'ETH', 'BTC', 'USDT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTradePrepaymentOrderDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of verification
        if self.verification:
            _dict['verification'] = self.verification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTradePrepaymentOrderDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "verification": Verification.from_dict(obj["verification"]) if obj.get("verification") is not None else None,
            "requestTime": obj.get("requestTime"),
            "version": obj.get("version"),
            "nonce": obj.get("nonce"),
            "businessId": obj.get("businessId"),
            "operator": obj.get("operator"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "walletId": obj.get("walletId"),
            "autoChooseWallet": obj.get("autoChooseWallet")
        })
        return _obj


