# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OpenLedgerTransactionQuery(BaseModel):
    """
    商户账本查询
    """ # noqa: E501
    id: Optional[StrictStr] = None
    order_by_create_at: Optional[StrictStr] = Field(default=None, alias="orderByCreateAt")
    create_at_since: Optional[StrictStr] = Field(default=None, alias="createAtSince")
    create_at_until: Optional[StrictStr] = Field(default=None, alias="createAtUntil")
    business_id: Optional[StrictStr] = Field(default=None, description="交易发生的业务ID，比如交易单号、充值单号等", alias="businessId")
    channel_id: Optional[StrictStr] = Field(default=None, description="查询整个支付链路的交易记录", alias="channelId")
    business_type: Optional[List[StrictInt]] = Field(default=None, description="交易类型，比如充值、提现、交易等", alias="businessType")
    account_type: Optional[List[StrictInt]] = Field(default=None, description="账户类型，比如商户、商户冻结账户等", alias="accountType")
    direction: Optional[List[StrictInt]] = Field(default=None, description="借：账户余额增加，贷：账户余额减少")
    currency: Optional[StrictStr] = Field(default=None, description="NGN: Nigerian Naira, GHS: Ghanaian Cedi, ETH: Ethereum, BTC: Bitcoin, USDT: Tether")
    amount: Optional[List[StrictStr]] = Field(default=None, description="交易金额区间")
    balance: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["id", "orderByCreateAt", "createAtSince", "createAtUntil", "businessId", "channelId", "businessType", "accountType", "direction", "currency", "amount", "balance"]

    @field_validator('business_type')
    def business_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 10, 11, 12, 2, 3, 200, 202, 203, 4, 5, 6, 7, 8, 81, 300, 301, 302, 103, 100, 101, 102]):
                raise ValueError("each list item must be one of (1, 10, 11, 12, 2, 3, 200, 202, 203, 4, 5, 6, 7, 8, 81, 300, 301, 302, 103, 100, 101, 102)")
        return value

    @field_validator('account_type')
    def account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 2, 22, 21, 3]):
                raise ValueError("each list item must be one of (1, 2, 22, 21, 3)")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 2]):
                raise ValueError("each list item must be one of (1, 2)")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NGN', 'GHS', 'ETH', 'BTC', 'USDT']):
            raise ValueError("must be one of enum values ('NGN', 'GHS', 'ETH', 'BTC', 'USDT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenLedgerTransactionQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenLedgerTransactionQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "orderByCreateAt": obj.get("orderByCreateAt"),
            "createAtSince": obj.get("createAtSince"),
            "createAtUntil": obj.get("createAtUntil"),
            "businessId": obj.get("businessId"),
            "channelId": obj.get("channelId"),
            "businessType": obj.get("businessType"),
            "accountType": obj.get("accountType"),
            "direction": obj.get("direction"),
            "currency": obj.get("currency"),
            "amount": obj.get("amount"),
            "balance": obj.get("balance")
        })
        return _obj


