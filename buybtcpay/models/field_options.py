# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class FieldOptions(BaseModel):
    """
    FieldOptions
    """ # noqa: E501
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    packed: Optional[StrictBool] = None
    features_or_builder: Optional[FeatureSetOrBuilder] = Field(default=None, alias="featuresOrBuilder")
    uninterpreted_option_list: Optional[List[UninterpretedOption]] = Field(default=None, alias="uninterpretedOptionList")
    uninterpreted_option_or_builder_list: Optional[List[UninterpretedOptionOrBuilder]] = Field(default=None, alias="uninterpretedOptionOrBuilderList")
    uninterpreted_option_count: Optional[StrictInt] = Field(default=None, alias="uninterpretedOptionCount")
    ctype: Optional[StrictStr] = None
    jstype: Optional[StrictStr] = None
    lazy: Optional[StrictBool] = None
    unverified_lazy: Optional[StrictBool] = Field(default=None, alias="unverifiedLazy")
    weak: Optional[StrictBool] = None
    debug_redact: Optional[StrictBool] = Field(default=None, alias="debugRedact")
    targets_list: Optional[List[StrictStr]] = Field(default=None, alias="targetsList")
    targets_count: Optional[StrictInt] = Field(default=None, alias="targetsCount")
    edition_defaults_list: Optional[List[EditionDefault]] = Field(default=None, alias="editionDefaultsList")
    edition_defaults_count: Optional[StrictInt] = Field(default=None, alias="editionDefaultsCount")
    edition_defaults_or_builder_list: Optional[List[EditionDefaultOrBuilder]] = Field(default=None, alias="editionDefaultsOrBuilderList")
    features: Optional[FeatureSet] = None
    initialized: Optional[StrictBool] = None
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    deprecated: Optional[StrictBool] = None
    retention: Optional[StrictStr] = None
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    default_instance_for_type: Optional[FieldOptions] = Field(default=None, alias="defaultInstanceForType")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    all_fields_raw: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFieldsRaw")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    __properties: ClassVar[List[str]] = ["unknownFields", "packed", "featuresOrBuilder", "uninterpretedOptionList", "uninterpretedOptionOrBuilderList", "uninterpretedOptionCount", "ctype", "jstype", "lazy", "unverifiedLazy", "weak", "debugRedact", "targetsList", "targetsCount", "editionDefaultsList", "editionDefaultsCount", "editionDefaultsOrBuilderList", "features", "initialized", "serializedSize", "deprecated", "retention", "parserForType", "defaultInstanceForType", "allFields", "allFieldsRaw", "initializationErrorString", "descriptorForType", "memoizedSerializedSize"]

    @field_validator('ctype')
    def ctype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STRING', 'CORD', 'STRING_PIECE']):
            raise ValueError("must be one of enum values ('STRING', 'CORD', 'STRING_PIECE')")
        return value

    @field_validator('jstype')
    def jstype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JS_NORMAL', 'JS_STRING', 'JS_NUMBER']):
            raise ValueError("must be one of enum values ('JS_NORMAL', 'JS_STRING', 'JS_NUMBER')")
        return value

    @field_validator('targets_list')
    def targets_list_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TARGET_TYPE_UNKNOWN', 'TARGET_TYPE_FILE', 'TARGET_TYPE_EXTENSION_RANGE', 'TARGET_TYPE_MESSAGE', 'TARGET_TYPE_FIELD', 'TARGET_TYPE_ONEOF', 'TARGET_TYPE_ENUM', 'TARGET_TYPE_ENUM_ENTRY', 'TARGET_TYPE_SERVICE', 'TARGET_TYPE_METHOD']):
                raise ValueError("each list item must be one of ('TARGET_TYPE_UNKNOWN', 'TARGET_TYPE_FILE', 'TARGET_TYPE_EXTENSION_RANGE', 'TARGET_TYPE_MESSAGE', 'TARGET_TYPE_FIELD', 'TARGET_TYPE_ONEOF', 'TARGET_TYPE_ENUM', 'TARGET_TYPE_ENUM_ENTRY', 'TARGET_TYPE_SERVICE', 'TARGET_TYPE_METHOD')")
        return value

    @field_validator('retention')
    def retention_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RETENTION_UNKNOWN', 'RETENTION_RUNTIME', 'RETENTION_SOURCE']):
            raise ValueError("must be one of enum values ('RETENTION_UNKNOWN', 'RETENTION_RUNTIME', 'RETENTION_SOURCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of features_or_builder
        if self.features_or_builder:
            _dict['featuresOrBuilder'] = self.features_or_builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in uninterpreted_option_list (list)
        _items = []
        if self.uninterpreted_option_list:
            for _item_uninterpreted_option_list in self.uninterpreted_option_list:
                if _item_uninterpreted_option_list:
                    _items.append(_item_uninterpreted_option_list.to_dict())
            _dict['uninterpretedOptionList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in uninterpreted_option_or_builder_list (list)
        _items = []
        if self.uninterpreted_option_or_builder_list:
            for _item_uninterpreted_option_or_builder_list in self.uninterpreted_option_or_builder_list:
                if _item_uninterpreted_option_or_builder_list:
                    _items.append(_item_uninterpreted_option_or_builder_list.to_dict())
            _dict['uninterpretedOptionOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in edition_defaults_list (list)
        _items = []
        if self.edition_defaults_list:
            for _item_edition_defaults_list in self.edition_defaults_list:
                if _item_edition_defaults_list:
                    _items.append(_item_edition_defaults_list.to_dict())
            _dict['editionDefaultsList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in edition_defaults_or_builder_list (list)
        _items = []
        if self.edition_defaults_or_builder_list:
            for _item_edition_defaults_or_builder_list in self.edition_defaults_or_builder_list:
                if _item_edition_defaults_or_builder_list:
                    _items.append(_item_edition_defaults_or_builder_list.to_dict())
            _dict['editionDefaultsOrBuilderList'] = _items
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict['features'] = self.features.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "packed": obj.get("packed"),
            "featuresOrBuilder": FeatureSetOrBuilder.from_dict(obj["featuresOrBuilder"]) if obj.get("featuresOrBuilder") is not None else None,
            "uninterpretedOptionList": [UninterpretedOption.from_dict(_item) for _item in obj["uninterpretedOptionList"]] if obj.get("uninterpretedOptionList") is not None else None,
            "uninterpretedOptionOrBuilderList": [UninterpretedOptionOrBuilder.from_dict(_item) for _item in obj["uninterpretedOptionOrBuilderList"]] if obj.get("uninterpretedOptionOrBuilderList") is not None else None,
            "uninterpretedOptionCount": obj.get("uninterpretedOptionCount"),
            "ctype": obj.get("ctype"),
            "jstype": obj.get("jstype"),
            "lazy": obj.get("lazy"),
            "unverifiedLazy": obj.get("unverifiedLazy"),
            "weak": obj.get("weak"),
            "debugRedact": obj.get("debugRedact"),
            "targetsList": obj.get("targetsList"),
            "targetsCount": obj.get("targetsCount"),
            "editionDefaultsList": [EditionDefault.from_dict(_item) for _item in obj["editionDefaultsList"]] if obj.get("editionDefaultsList") is not None else None,
            "editionDefaultsCount": obj.get("editionDefaultsCount"),
            "editionDefaultsOrBuilderList": [EditionDefaultOrBuilder.from_dict(_item) for _item in obj["editionDefaultsOrBuilderList"]] if obj.get("editionDefaultsOrBuilderList") is not None else None,
            "features": FeatureSet.from_dict(obj["features"]) if obj.get("features") is not None else None,
            "initialized": obj.get("initialized"),
            "serializedSize": obj.get("serializedSize"),
            "deprecated": obj.get("deprecated"),
            "retention": obj.get("retention"),
            "parserForType": obj.get("parserForType"),
            "defaultInstanceForType": FieldOptions.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "allFields": obj.get("allFields"),
            "allFieldsRaw": obj.get("allFieldsRaw"),
            "initializationErrorString": obj.get("initializationErrorString"),
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "memoizedSerializedSize": obj.get("memoizedSerializedSize")
        })
        return _obj

from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.edition_default import EditionDefault
from buybtcpay.models.edition_default_or_builder import EditionDefaultOrBuilder
from buybtcpay.models.feature_set import FeatureSet
from buybtcpay.models.feature_set_or_builder import FeatureSetOrBuilder
from buybtcpay.models.uninterpreted_option import UninterpretedOption
from buybtcpay.models.uninterpreted_option_or_builder import UninterpretedOptionOrBuilder
# TODO: Rewrite to not use raise_errors
FieldOptions.model_rebuild(raise_errors=False)

