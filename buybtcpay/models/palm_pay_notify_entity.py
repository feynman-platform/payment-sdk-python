# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PalmPayNotifyEntity(BaseModel):
    """
    PalmPayNotifyEntity
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    status: Optional[StrictInt] = Field(default=None, description="0: NORMAL, 1: DELETE")
    merchant_id: Optional[StrictStr] = Field(default=None, alias="merchantId")
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    order_no: Optional[StrictStr] = Field(default=None, alias="orderNo")
    amount: Optional[StrictInt] = None
    currency: Optional[StrictStr] = Field(default=None, description="NGN: Nigerian Naira, GHS: Ghanaian Cedi, ETH: Ethereum, BTC: Bitcoin, USDT: Tether")
    order_status: Optional[StrictInt] = Field(default=None, description="0: UNPAID, 1: PAYING, 2: SUCCESS, 3: FAIL, 4: CLOSE, 20: REFUNDED", alias="orderStatus")
    complete_time: Optional[datetime] = Field(default=None, alias="completeTime")
    error_code: Optional[StrictStr] = Field(default=None, alias="errorCode")
    sign: Optional[StrictStr] = None
    payer_bank_code: Optional[StrictStr] = Field(default=None, alias="payerBankCode")
    payer_bank_name: Optional[StrictStr] = Field(default=None, alias="payerBankName")
    payer_account_no: Optional[StrictStr] = Field(default=None, alias="payerAccountNo")
    payer_account_name: Optional[StrictStr] = Field(default=None, alias="payerAccountName")
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "status", "merchantId", "orderId", "orderNo", "amount", "currency", "orderStatus", "completeTime", "errorCode", "sign", "payerBankCode", "payerBankName", "payerAccountNo", "payerAccountName"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NGN', 'GHS', 'ETH', 'BTC', 'USDT']):
            raise ValueError("must be one of enum values ('NGN', 'GHS', 'ETH', 'BTC', 'USDT')")
        return value

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 20]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 20)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PalmPayNotifyEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PalmPayNotifyEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "status": obj.get("status"),
            "merchantId": obj.get("merchantId"),
            "orderId": obj.get("orderId"),
            "orderNo": obj.get("orderNo"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "orderStatus": obj.get("orderStatus"),
            "completeTime": obj.get("completeTime"),
            "errorCode": obj.get("errorCode"),
            "sign": obj.get("sign"),
            "payerBankCode": obj.get("payerBankCode"),
            "payerBankName": obj.get("payerBankName"),
            "payerAccountNo": obj.get("payerAccountNo"),
            "payerAccountName": obj.get("payerAccountName")
        })
        return _obj


