# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.buy_btc_money_json_value import BuyBtcMoneyJsonValue
from typing import Optional, Set
from typing_extensions import Self

class PalmPayVirtualAccountOrderEntity(BaseModel):
    """
    PalmPay虚拟账户订单
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    order_no: Optional[StrictStr] = Field(default=None, description="PalmPay订单号", alias="orderNo")
    order_status: Optional[StrictInt] = Field(default=None, description="0: Init, 1: Success(Only this status will receive pay in order notifications), 2: Failed, 3: Processing, 4: Closed, 5: Refunded, 999: Unknown", alias="orderStatus")
    order_created_time: Optional[datetime] = Field(default=None, description="订单创建时间", alias="orderCreatedTime")
    order_update_time: Optional[datetime] = Field(default=None, description="订单修改时间", alias="orderUpdateTime")
    order_amount: Optional[BuyBtcMoneyJsonValue] = Field(default=None, alias="orderAmount")
    reference: Optional[StrictStr] = None
    payer_account_no: Optional[StrictStr] = Field(default=None, description="付款方账户号码", alias="payerAccountNo")
    payer_account_name: Optional[StrictStr] = Field(default=None, description="付款方账户名称", alias="payerAccountName")
    payer_bank_name: Optional[StrictStr] = Field(default=None, description="付款方银行", alias="payerBankName")
    virtual_account_no: Optional[StrictStr] = Field(default=None, description="只有向虚拟账号入金才会返回，向商户主账户入金不会返回", alias="virtualAccountNo")
    virtual_account_name: Optional[StrictStr] = Field(default=None, description="只有向虚拟账号入金才会返回，向商户主账户入金不会返回", alias="virtualAccountName")
    account_reference: Optional[StrictStr] = Field(default=None, description="虚拟账户备注字段", alias="accountReference")
    session_id: Optional[StrictStr] = Field(default=None, description="渠道响应参数", alias="sessionId")
    sign: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "orderNo", "orderStatus", "orderCreatedTime", "orderUpdateTime", "orderAmount", "reference", "payerAccountNo", "payerAccountName", "payerBankName", "virtualAccountNo", "virtualAccountName", "accountReference", "sessionId", "sign"]

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 999]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 999)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PalmPayVirtualAccountOrderEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order_amount
        if self.order_amount:
            _dict['orderAmount'] = self.order_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PalmPayVirtualAccountOrderEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "orderNo": obj.get("orderNo"),
            "orderStatus": obj.get("orderStatus"),
            "orderCreatedTime": obj.get("orderCreatedTime"),
            "orderUpdateTime": obj.get("orderUpdateTime"),
            "orderAmount": BuyBtcMoneyJsonValue.from_dict(obj["orderAmount"]) if obj.get("orderAmount") is not None else None,
            "reference": obj.get("reference"),
            "payerAccountNo": obj.get("payerAccountNo"),
            "payerAccountName": obj.get("payerAccountName"),
            "payerBankName": obj.get("payerBankName"),
            "virtualAccountNo": obj.get("virtualAccountNo"),
            "virtualAccountName": obj.get("virtualAccountName"),
            "accountReference": obj.get("accountReference"),
            "sessionId": obj.get("sessionId"),
            "sign": obj.get("sign")
        })
        return _obj


