# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MerchantBillQuery(BaseModel):
    """
    商户收支分页查询条件
    """ # noqa: E501
    id: Optional[StrictStr] = None
    order_by_create_at: Optional[StrictStr] = Field(default=None, alias="orderByCreateAt")
    create_at_since: Optional[StrictStr] = Field(default=None, alias="createAtSince")
    create_at_until: Optional[StrictStr] = Field(default=None, alias="createAtUntil")
    business_ids: Optional[List[StrictStr]] = Field(default=None, description="商户账单ID列表", alias="businessIds")
    business_id: Optional[StrictStr] = Field(default=None, description="业务ID", alias="businessId")
    channel_id: Optional[StrictStr] = Field(default=None, description="支付路ID", alias="channelId")
    merchant_id: Optional[StrictStr] = Field(default=None, description="商户ID", alias="merchantId")
    business_type: Optional[List[StrictInt]] = Field(default=None, description="业务类型", alias="businessType")
    account_type: Optional[List[StrictInt]] = Field(default=None, description="账户类型", alias="accountType")
    counterparty_account_type: Optional[List[StrictInt]] = Field(default=None, description="交易对方账户类型", alias="counterpartyAccountType")
    account_no: Optional[StrictStr] = Field(default=None, description="账户号码", alias="accountNo")
    counterparty_account_no: Optional[StrictStr] = Field(default=None, description="交易对方账户号码", alias="counterpartyAccountNo")
    direction: Optional[List[StrictInt]] = Field(default=None, description="交易方向")
    bill_status: Optional[List[StrictInt]] = Field(default=None, description="交易状态", alias="billStatus")
    currency: Optional[List[StrictStr]] = Field(default=None, description="币种")
    amount: Optional[List[StrictStr]] = Field(default=None, description="金额，需要与币种一起使用")
    __properties: ClassVar[List[str]] = ["id", "orderByCreateAt", "createAtSince", "createAtUntil", "businessIds", "businessId", "channelId", "merchantId", "businessType", "accountType", "counterpartyAccountType", "accountNo", "counterpartyAccountNo", "direction", "billStatus", "currency", "amount"]

    @field_validator('business_type')
    def business_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 10, 2, 3, 4, 5, 6, 7, 8, 81, 100, 101, 102]):
                raise ValueError("each list item must be one of (1, 10, 2, 3, 4, 5, 6, 7, 8, 81, 100, 101, 102)")
        return value

    @field_validator('account_type')
    def account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 2, 22, 21, 3]):
                raise ValueError("each list item must be one of (1, 2, 22, 21, 3)")
        return value

    @field_validator('counterparty_account_type')
    def counterparty_account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 2, 22, 21, 3]):
                raise ValueError("each list item must be one of (1, 2, 22, 21, 3)")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 2]):
                raise ValueError("each list item must be one of (1, 2)")
        return value

    @field_validator('bill_status')
    def bill_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([0, 1, 2, 3, 4, 5, 6]):
                raise ValueError("each list item must be one of (0, 1, 2, 3, 4, 5, 6)")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['NGN', 'GHS', 'ETH', 'BTC', 'USDT']):
                raise ValueError("each list item must be one of ('NGN', 'GHS', 'ETH', 'BTC', 'USDT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantBillQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantBillQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "orderByCreateAt": obj.get("orderByCreateAt"),
            "createAtSince": obj.get("createAtSince"),
            "createAtUntil": obj.get("createAtUntil"),
            "businessIds": obj.get("businessIds"),
            "businessId": obj.get("businessId"),
            "channelId": obj.get("channelId"),
            "merchantId": obj.get("merchantId"),
            "businessType": obj.get("businessType"),
            "accountType": obj.get("accountType"),
            "counterpartyAccountType": obj.get("counterpartyAccountType"),
            "accountNo": obj.get("accountNo"),
            "counterpartyAccountNo": obj.get("counterpartyAccountNo"),
            "direction": obj.get("direction"),
            "billStatus": obj.get("billStatus"),
            "currency": obj.get("currency"),
            "amount": obj.get("amount")
        })
        return _obj


