# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.fee import Fee
from typing import Optional, Set
from typing_extensions import Self

class QueryPayStatusData(BaseModel):
    """
    QueryPayStatusData
    """ # noqa: E501
    currency: Optional[StrictStr] = None
    amount: Optional[StrictInt] = Field(default=None, description="订单金额(最小单位计量) 只有当status=1时才会有值")
    fee: Optional[Fee] = None
    order_no: Optional[StrictStr] = Field(default=None, description="PalmPay返回的订单号", alias="orderNo")
    order_id: Optional[StrictStr] = Field(default=None, description="商户原始订单号", alias="orderId")
    order_status: Optional[StrictInt] = Field(default=None, description="订单状态(见订单状态)", alias="orderStatus")
    session_id: Optional[StrictStr] = Field(default=None, description="渠道响应参数，注：大部分非NIBSS通道不返回sessionId，此类订单若有问题需提供订单号找PalmPay和银行确认用户实际到账情况", alias="sessionId")
    message: Optional[StrictStr] = Field(default=None, description="订单状态描述信息")
    error_msg: Optional[StrictStr] = Field(default=None, description="错误信息", alias="errorMsg")
    create_time: Optional[StrictInt] = Field(default=None, description="订单创建时间", alias="createTime")
    completed_time: Optional[StrictInt] = Field(default=None, description="订单完成时间", alias="completedTime")
    __properties: ClassVar[List[str]] = ["currency", "amount", "fee", "orderNo", "orderId", "orderStatus", "sessionId", "message", "errorMsg", "createTime", "completedTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryPayStatusData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryPayStatusData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency": obj.get("currency"),
            "amount": obj.get("amount"),
            "fee": Fee.from_dict(obj["fee"]) if obj.get("fee") is not None else None,
            "orderNo": obj.get("orderNo"),
            "orderId": obj.get("orderId"),
            "orderStatus": obj.get("orderStatus"),
            "sessionId": obj.get("sessionId"),
            "message": obj.get("message"),
            "errorMsg": obj.get("errorMsg"),
            "createTime": obj.get("createTime"),
            "completedTime": obj.get("completedTime")
        })
        return _obj


