# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VirtualOrderDetail(BaseModel):
    """
    VirtualOrderDetail
    """ # noqa: E501
    order_no: Optional[StrictStr] = Field(default=None, alias="orderNo")
    order_status: Optional[StrictStr] = Field(default=None, alias="orderStatus")
    created_time: Optional[StrictInt] = Field(default=None, alias="createdTime")
    update_time: Optional[StrictInt] = Field(default=None, alias="updateTime")
    currency: Optional[StrictStr] = None
    order_amount: Optional[StrictInt] = Field(default=None, alias="orderAmount")
    reference: Optional[StrictStr] = None
    payer_account_no: Optional[StrictStr] = Field(default=None, alias="payerAccountNo")
    payer_account_name: Optional[StrictStr] = Field(default=None, alias="payerAccountName")
    payer_bank_name: Optional[StrictStr] = Field(default=None, alias="payerBankName")
    virtual_account_no: Optional[StrictStr] = Field(default=None, alias="virtualAccountNo")
    virtual_account_name: Optional[StrictStr] = Field(default=None, alias="virtualAccountName")
    account_reference: Optional[StrictStr] = Field(default=None, alias="accountReference")
    session_id: Optional[StrictStr] = Field(default=None, alias="sessionId")
    __properties: ClassVar[List[str]] = ["orderNo", "orderStatus", "createdTime", "updateTime", "currency", "orderAmount", "reference", "payerAccountNo", "payerAccountName", "payerBankName", "virtualAccountNo", "virtualAccountName", "accountReference", "sessionId"]

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['0', '1', '2', '3', '4', '5', '999']):
            raise ValueError("must be one of enum values ('0', '1', '2', '3', '4', '5', '999')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NGN', 'GHS', 'TZS', 'KES', 'ZAR']):
            raise ValueError("must be one of enum values ('NGN', 'GHS', 'TZS', 'KES', 'ZAR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualOrderDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualOrderDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderNo": obj.get("orderNo"),
            "orderStatus": obj.get("orderStatus"),
            "createdTime": obj.get("createdTime"),
            "updateTime": obj.get("updateTime"),
            "currency": obj.get("currency"),
            "orderAmount": obj.get("orderAmount"),
            "reference": obj.get("reference"),
            "payerAccountNo": obj.get("payerAccountNo"),
            "payerAccountName": obj.get("payerAccountName"),
            "payerBankName": obj.get("payerBankName"),
            "virtualAccountNo": obj.get("virtualAccountNo"),
            "virtualAccountName": obj.get("virtualAccountName"),
            "accountReference": obj.get("accountReference"),
            "sessionId": obj.get("sessionId")
        })
        return _obj


