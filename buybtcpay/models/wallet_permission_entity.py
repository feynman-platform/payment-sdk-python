# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WalletPermissionEntity(BaseModel):
    """
    将钱包的使用权限授予指定的商户
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    wallet_id: Optional[StrictInt] = Field(default=None, description="钱包ID", alias="walletId")
    permission: Optional[StrictInt] = Field(default=None, description="1: Bulk transaction, 11: Merchant self service recharge, 12: Palmpay virtual account recharge, 2: Transfer in, 3: Transfer out, 100: Trade transfer in, 101: Trade transfer out, 4: Payout, 5: Withdrawal, 6: Currency exchange, 70: To merchant, 71: From merchant, 8: Fee, 9: Frozen, 10: Unfrozen, 20: Refund, 30: Reversal platform to wallet, 31: Reversal wallet to platform, 32: Reversal wallet to wallet")
    merchant_id: Optional[StrictStr] = Field(default=None, description="授予给的商户ID", alias="merchantId")
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "walletId", "permission", "merchantId"]

    @field_validator('permission')
    def permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 11, 12, 2, 3, 100, 101, 4, 5, 6, 70, 71, 8, 9, 10, 20, 30, 31, 32]):
            raise ValueError("must be one of enum values (1, 11, 12, 2, 3, 100, 101, 4, 5, 6, 70, 71, 8, 9, 10, 20, 30, 31, 32)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WalletPermissionEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WalletPermissionEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "walletId": obj.get("walletId"),
            "permission": obj.get("permission"),
            "merchantId": obj.get("merchantId")
        })
        return _obj


