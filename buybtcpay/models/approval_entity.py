# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApprovalEntity(BaseModel):
    """
    ApprovalEntity
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    applicant_id: Optional[StrictStr] = Field(default=None, alias="applicantId")
    approval_status: Optional[StrictInt] = Field(default=None, description="0: Awaiting Approval, 1: Approved, 2: Rejected, 3: Canceled", alias="approvalStatus")
    approval_time: Optional[datetime] = Field(default=None, alias="approvalTime")
    approver_id: Optional[StrictStr] = Field(default=None, alias="approverId")
    approval_comment: Optional[StrictStr] = Field(default=None, alias="approvalComment")
    approval_type: Optional[StrictInt] = Field(default=None, description="0: Platform Recharge, 1: Merchant Recharge, 11: Virtual Account Recharge, 12: Merchant Self Service Recharge, 13: Virtual Account Self Service Recharge, 14: Merchant Self Service Recharge by PalmPay Virtual Account, 15: Virtual merchant Self Service Recharge by PalmPay Virtual Account, 2: Refund, 3: Frozen, 4: Unfrozen, 100: Reversal platform to merchant, 101: Reversal merchant to platform, 102: Reversal merchant to merchant", alias="approvalType")
    business_id: Optional[StrictStr] = Field(default=None, alias="businessId")
    apply_content: Optional[StrictStr] = Field(default=None, alias="applyContent")
    bill_ids: Optional[List[StrictInt]] = Field(default=None, alias="billIds")
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "applicantId", "approvalStatus", "approvalTime", "approverId", "approvalComment", "approvalType", "businessId", "applyContent", "billIds"]

    @field_validator('approval_status')
    def approval_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3]):
            raise ValueError("must be one of enum values (0, 1, 2, 3)")
        return value

    @field_validator('approval_type')
    def approval_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 11, 12, 13, 14, 15, 2, 3, 4, 100, 101, 102]):
            raise ValueError("must be one of enum values (0, 1, 11, 12, 13, 14, 15, 2, 3, 4, 100, 101, 102)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApprovalEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApprovalEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "applicantId": obj.get("applicantId"),
            "approvalStatus": obj.get("approvalStatus"),
            "approvalTime": obj.get("approvalTime"),
            "approverId": obj.get("approverId"),
            "approvalComment": obj.get("approvalComment"),
            "approvalType": obj.get("approvalType"),
            "businessId": obj.get("businessId"),
            "applyContent": obj.get("applyContent"),
            "billIds": obj.get("billIds")
        })
        return _obj


