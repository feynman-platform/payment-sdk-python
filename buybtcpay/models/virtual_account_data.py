# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VirtualAccountData(BaseModel):
    """
    虚拟账号创建响应参数
    """ # noqa: E501
    virtual_account_name: StrictStr = Field(description="虚拟账号名称", alias="virtualAccountName")
    virtual_account_no: StrictStr = Field(description="虚拟账号号码", alias="virtualAccountNo")
    status: StrictStr = Field(description="虚拟账号状态")
    identity_type: StrictStr = Field(description="使用者身份类型", alias="identityType")
    license_number: Optional[StrictStr] = Field(default=None, description="证件号码", alias="licenseNumber")
    email: Optional[StrictStr] = Field(default=None, description="邮箱")
    customer_name: Optional[StrictStr] = Field(default=None, description="使用者名称", alias="customerName")
    account_reference: Optional[StrictStr] = Field(default=None, description="虚拟账户备注字段", alias="accountReference")
    __properties: ClassVar[List[str]] = ["virtualAccountName", "virtualAccountNo", "status", "identityType", "licenseNumber", "email", "customerName", "accountReference"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Disabled', 'Enabled', 'Deleted']):
            raise ValueError("must be one of enum values ('Disabled', 'Enabled', 'Deleted')")
        return value

    @field_validator('identity_type')
    def identity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['personal', 'company']):
            raise ValueError("must be one of enum values ('personal', 'company')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualAccountData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualAccountData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "virtualAccountName": obj.get("virtualAccountName"),
            "virtualAccountNo": obj.get("virtualAccountNo"),
            "status": obj.get("status"),
            "identityType": obj.get("identityType"),
            "licenseNumber": obj.get("licenseNumber"),
            "email": obj.get("email"),
            "customerName": obj.get("customerName"),
            "accountReference": obj.get("accountReference")
        })
        return _obj


