# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.byte_string import ByteString
from buybtcpay.models.unknown_field_set import UnknownFieldSet
from typing import Optional, Set
from typing_extensions import Self

class FieldDescriptorProto(BaseModel):
    """
    FieldDescriptorProto
    """ # noqa: E501
    unknown_fields: Optional[UnknownFieldSet] = Field(default=None, alias="unknownFields")
    json_name: Optional[StrictStr] = Field(default=None, alias="jsonName")
    proto3_optional: Optional[StrictBool] = Field(default=None, alias="proto3Optional")
    oneof_index: Optional[StrictInt] = Field(default=None, alias="oneofIndex")
    extendee: Optional[StrictStr] = None
    options_or_builder: Optional[FieldOptionsOrBuilder] = Field(default=None, alias="optionsOrBuilder")
    extendee_bytes: Optional[ByteString] = Field(default=None, alias="extendeeBytes")
    default_value_bytes: Optional[ByteString] = Field(default=None, alias="defaultValueBytes")
    json_name_bytes: Optional[ByteString] = Field(default=None, alias="jsonNameBytes")
    type_name_bytes: Optional[ByteString] = Field(default=None, alias="typeNameBytes")
    initialized: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    type_name: Optional[StrictStr] = Field(default=None, alias="typeName")
    type: Optional[StrictStr] = None
    default_value: Optional[StrictStr] = Field(default=None, alias="defaultValue")
    number: Optional[StrictInt] = None
    options: Optional[FieldOptions] = None
    serialized_size: Optional[StrictInt] = Field(default=None, alias="serializedSize")
    parser_for_type: Optional[Dict[str, Any]] = Field(default=None, alias="parserForType")
    default_instance_for_type: Optional[FieldDescriptorProto] = Field(default=None, alias="defaultInstanceForType")
    label: Optional[StrictStr] = None
    name_bytes: Optional[ByteString] = Field(default=None, alias="nameBytes")
    initialization_error_string: Optional[StrictStr] = Field(default=None, alias="initializationErrorString")
    descriptor_for_type: Optional[Descriptor] = Field(default=None, alias="descriptorForType")
    all_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="allFields")
    memoized_serialized_size: Optional[StrictInt] = Field(default=None, alias="memoizedSerializedSize")
    __properties: ClassVar[List[str]] = ["unknownFields", "jsonName", "proto3Optional", "oneofIndex", "extendee", "optionsOrBuilder", "extendeeBytes", "defaultValueBytes", "jsonNameBytes", "typeNameBytes", "initialized", "name", "typeName", "type", "defaultValue", "number", "options", "serializedSize", "parserForType", "defaultInstanceForType", "label", "nameBytes", "initializationErrorString", "descriptorForType", "allFields", "memoizedSerializedSize"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_DOUBLE', 'TYPE_FLOAT', 'TYPE_INT64', 'TYPE_UINT64', 'TYPE_INT32', 'TYPE_FIXED64', 'TYPE_FIXED32', 'TYPE_BOOL', 'TYPE_STRING', 'TYPE_GROUP', 'TYPE_MESSAGE', 'TYPE_BYTES', 'TYPE_UINT32', 'TYPE_ENUM', 'TYPE_SFIXED32', 'TYPE_SFIXED64', 'TYPE_SINT32', 'TYPE_SINT64']):
            raise ValueError("must be one of enum values ('TYPE_DOUBLE', 'TYPE_FLOAT', 'TYPE_INT64', 'TYPE_UINT64', 'TYPE_INT32', 'TYPE_FIXED64', 'TYPE_FIXED32', 'TYPE_BOOL', 'TYPE_STRING', 'TYPE_GROUP', 'TYPE_MESSAGE', 'TYPE_BYTES', 'TYPE_UINT32', 'TYPE_ENUM', 'TYPE_SFIXED32', 'TYPE_SFIXED64', 'TYPE_SINT32', 'TYPE_SINT64')")
        return value

    @field_validator('label')
    def label_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LABEL_OPTIONAL', 'LABEL_REPEATED', 'LABEL_REQUIRED']):
            raise ValueError("must be one of enum values ('LABEL_OPTIONAL', 'LABEL_REPEATED', 'LABEL_REQUIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldDescriptorProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unknown_fields
        if self.unknown_fields:
            _dict['unknownFields'] = self.unknown_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options_or_builder
        if self.options_or_builder:
            _dict['optionsOrBuilder'] = self.options_or_builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extendee_bytes
        if self.extendee_bytes:
            _dict['extendeeBytes'] = self.extendee_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_value_bytes
        if self.default_value_bytes:
            _dict['defaultValueBytes'] = self.default_value_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of json_name_bytes
        if self.json_name_bytes:
            _dict['jsonNameBytes'] = self.json_name_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type_name_bytes
        if self.type_name_bytes:
            _dict['typeNameBytes'] = self.type_name_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_instance_for_type
        if self.default_instance_for_type:
            _dict['defaultInstanceForType'] = self.default_instance_for_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name_bytes
        if self.name_bytes:
            _dict['nameBytes'] = self.name_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptor_for_type
        if self.descriptor_for_type:
            _dict['descriptorForType'] = self.descriptor_for_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldDescriptorProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unknownFields": UnknownFieldSet.from_dict(obj["unknownFields"]) if obj.get("unknownFields") is not None else None,
            "jsonName": obj.get("jsonName"),
            "proto3Optional": obj.get("proto3Optional"),
            "oneofIndex": obj.get("oneofIndex"),
            "extendee": obj.get("extendee"),
            "optionsOrBuilder": FieldOptionsOrBuilder.from_dict(obj["optionsOrBuilder"]) if obj.get("optionsOrBuilder") is not None else None,
            "extendeeBytes": ByteString.from_dict(obj["extendeeBytes"]) if obj.get("extendeeBytes") is not None else None,
            "defaultValueBytes": ByteString.from_dict(obj["defaultValueBytes"]) if obj.get("defaultValueBytes") is not None else None,
            "jsonNameBytes": ByteString.from_dict(obj["jsonNameBytes"]) if obj.get("jsonNameBytes") is not None else None,
            "typeNameBytes": ByteString.from_dict(obj["typeNameBytes"]) if obj.get("typeNameBytes") is not None else None,
            "initialized": obj.get("initialized"),
            "name": obj.get("name"),
            "typeName": obj.get("typeName"),
            "type": obj.get("type"),
            "defaultValue": obj.get("defaultValue"),
            "number": obj.get("number"),
            "options": FieldOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "serializedSize": obj.get("serializedSize"),
            "parserForType": obj.get("parserForType"),
            "defaultInstanceForType": FieldDescriptorProto.from_dict(obj["defaultInstanceForType"]) if obj.get("defaultInstanceForType") is not None else None,
            "label": obj.get("label"),
            "nameBytes": ByteString.from_dict(obj["nameBytes"]) if obj.get("nameBytes") is not None else None,
            "initializationErrorString": obj.get("initializationErrorString"),
            "descriptorForType": Descriptor.from_dict(obj["descriptorForType"]) if obj.get("descriptorForType") is not None else None,
            "allFields": obj.get("allFields"),
            "memoizedSerializedSize": obj.get("memoizedSerializedSize")
        })
        return _obj

from buybtcpay.models.descriptor import Descriptor
from buybtcpay.models.field_options import FieldOptions
from buybtcpay.models.field_options_or_builder import FieldOptionsOrBuilder
# TODO: Rewrite to not use raise_errors
FieldDescriptorProto.model_rebuild(raise_errors=False)

