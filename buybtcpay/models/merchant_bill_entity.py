# coding: utf-8

"""
    pay.buybtc123.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from buybtcpay.models.buy_btc_money_json_value import BuyBtcMoneyJsonValue
from buybtcpay.models.merchant_bill_extra import MerchantBillExtra
from typing import Optional, Set
from typing_extensions import Self

class MerchantBillEntity(BaseModel):
    """
    商户交易流水，记录商户的收入、支出相关信息，该账本只关注商户账户的出支，不关心冻结账户等中间账户
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID")
    create_at: Optional[datetime] = Field(default=None, alias="createAt")
    update_at: Optional[datetime] = Field(default=None, alias="updateAt")
    business_id: Optional[StrictStr] = Field(default=None, alias="businessId")
    merchant_id: Optional[StrictStr] = Field(default=None, description="所属商户ID", alias="merchantId")
    channel_id: Optional[StrictStr] = Field(default=None, description="支付链路ID，跟踪支付流程，记账的业务ID也用这个", alias="channelId")
    business_type: Optional[StrictInt] = Field(default=None, description="1: Bulk transaction, 10: Virtual account recharge, 11: Merchant self service recharge, 12: Palmpay virtual account recharge, 2: Refund, 3: Payout, 200: Transfer, 202: Withdrawal, 203: Trade transfer, 4: Frozen, 5: Fee, 6: Platform recharge, 7: Unfrozen, 8: Merchant to merchant, 81: Currency exchange, 300: Reversal platform to wallet, 301: Reversal wallet to platform, 302: Reversal wallet to wallet, 103: Reversal platform to bank, 100: Reversal platform to merchant, 101: Reversal merchant to platform, 102: Reversal merchant to merchant", alias="businessType")
    account_type: Optional[StrictInt] = Field(default=None, description="1: Platform, 2: Merchant, 22: Virtual account, 21: Merchant Frozen, 3: Bank", alias="accountType")
    account_no: Optional[StrictStr] = Field(default=None, alias="accountNo")
    direction: Optional[StrictInt] = Field(default=None, description="1: Debit, 2: Credit")
    amount: Optional[BuyBtcMoneyJsonValue] = None
    wallet_id: Optional[StrictStr] = Field(default=None, description="钱包ID", alias="walletId")
    wallet_type: Optional[StrictStr] = Field(default=None, description="钱包类型", alias="walletType")
    counterparty_account_type: Optional[StrictInt] = Field(default=None, description="1: Platform, 2: Merchant, 22: Virtual account, 21: Merchant Frozen, 3: Bank", alias="counterpartyAccountType")
    counterparty_account_no: Optional[StrictStr] = Field(default=None, description="交易对方账户号码", alias="counterpartyAccountNo")
    counterparty_wallet_id: Optional[StrictStr] = Field(default=None, description="交易对方钱包ID", alias="counterpartyWalletId")
    bill_status: Optional[StrictInt] = Field(default=None, description="0: Initiated, 1: Processing, 2: Success, 3: Failed, 4: Canceled, 5: Closed, 6: Refunded", alias="billStatus")
    extra: Optional[MerchantBillExtra] = None
    __properties: ClassVar[List[str]] = ["id", "createAt", "updateAt", "businessId", "merchantId", "channelId", "businessType", "accountType", "accountNo", "direction", "amount", "walletId", "walletType", "counterpartyAccountType", "counterpartyAccountNo", "counterpartyWalletId", "billStatus", "extra"]

    @field_validator('business_type')
    def business_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 10, 11, 12, 2, 3, 200, 202, 203, 4, 5, 6, 7, 8, 81, 300, 301, 302, 103, 100, 101, 102]):
            raise ValueError("must be one of enum values (1, 10, 11, 12, 2, 3, 200, 202, 203, 4, 5, 6, 7, 8, 81, 300, 301, 302, 103, 100, 101, 102)")
        return value

    @field_validator('account_type')
    def account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 22, 21, 3]):
            raise ValueError("must be one of enum values (1, 2, 22, 21, 3)")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2]):
            raise ValueError("must be one of enum values (1, 2)")
        return value

    @field_validator('wallet_type')
    def wallet_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['1', '2']):
            raise ValueError("must be one of enum values ('1', '2')")
        return value

    @field_validator('counterparty_account_type')
    def counterparty_account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 22, 21, 3]):
            raise ValueError("must be one of enum values (1, 2, 22, 21, 3)")
        return value

    @field_validator('bill_status')
    def bill_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantBillEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extra
        if self.extra:
            _dict['extra'] = self.extra.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantBillEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createAt": obj.get("createAt"),
            "updateAt": obj.get("updateAt"),
            "businessId": obj.get("businessId"),
            "merchantId": obj.get("merchantId"),
            "channelId": obj.get("channelId"),
            "businessType": obj.get("businessType"),
            "accountType": obj.get("accountType"),
            "accountNo": obj.get("accountNo"),
            "direction": obj.get("direction"),
            "amount": BuyBtcMoneyJsonValue.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "walletId": obj.get("walletId"),
            "walletType": obj.get("walletType"),
            "counterpartyAccountType": obj.get("counterpartyAccountType"),
            "counterpartyAccountNo": obj.get("counterpartyAccountNo"),
            "counterpartyWalletId": obj.get("counterpartyWalletId"),
            "billStatus": obj.get("billStatus"),
            "extra": MerchantBillExtra.from_dict(obj["extra"]) if obj.get("extra") is not None else None
        })
        return _obj


